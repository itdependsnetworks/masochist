%token ASSIGN
%token BANG
%token CLASS
%token COLON
%token COMMA
%token CONST
%token CONTINUE
%token DEFAULT
%token DOT
%token ELSE
%token EQUALS
%token EXPORT
%token FALSE
%token FOR
%token FUNCTION
%token GREATER_THAN
%token GREATER_THAN_OR_EQUAL
%token IDENTIFIER
%token IF
%token IMPORT
%token LESS_THAN
%token LESS_THAN_OR_EQUAL
%token LET
%token LOGICAL_AND
%token LOGICAL_OR
%token NEW
%token NULL
%token NUMBER
%token OPENING_BRACE CLOSING_BRACE
%token OPENING_BRACKET CLOSING_BRACKET
%token OPENING_PAREN CLOSING_PAREN
%token REST
%token RETURN
%token SEMICOLON
%token STRICT_EQUALS
%token THIS
%token TRUE
%token WHILE
%token YIELD

Statement → AssignmentStatement { $$ = $1; }
Statement → ClassDeclaration { $$ = $1; }
Statement → ExportDefaultDeclaration { $$ = $1; }

AssignmentStatement → CONST Identifier ASSIGN Expression SEMICOLON {
  $$ = {
    kind: 'AssignmentStatement',
    binding: 'const',
    lhs: $2,
    rhs: $4,
  };
}
AssignmentStatement → LET Identifier ASSIGN Expression SEMICOLON {
  $$ = {
    kind: 'AssignmentStatement',
    binding: 'let',
    lhs: $2,
    rhs: $4,
  };
}
AssignmentStatement → Expression ASSIGN Expression SEMICOLON {
  $$ = {
    kind: 'AssignmentStatement',
    binding: null,
    lhs: $1,
    rhs: $3,
  };
}

Identifier → IDENTIFIER {
  $$ = {
    kind: 'Identifier',
    name: $1.contents,
  };
}

Expression → THIS {
  $$ = {
    kind: 'Identifier',
    name: 'this',
  };
}
Expression → Identifier { $$ = $1; }
Expression → MemberExpression { $$ = $1; }
Expression → PrimitiveValue { $$ = $1; }

MemberExpression → Expression DOT Expression {
  $$ = {
    kind: 'MemberExpression',
    object: $1,
    property: $3,
  };
}

PrimitiveValue → ArrayValue { $$ = $1; }
PrimitiveValue → BooleanValue { $$ = $1; }
PrimitiveValue → NullValue { $$ = $1; }
PrimitiveValue → NumberValue { $$ = $1; }

ArrayValue → OPENING_BRACKET CLOSING_BRACKET {
  $$ = {
    kind: 'ArrayValue',
    items: [],
  };
}
ArrayValue → OPENING_BRACKET ArrayItemList CLOSING_BRACKET {
  $$ = {
    kind: 'ArrayValue',
    items: $2,
  };
}
ArrayItemList → Expression { $$ = [$1]; }
ArrayItemList → ArrayItemList COMMA Expression { $1.push($3); $$ = $1; }

BooleanValue → FALSE {
  $$ = {
    kind: 'BooleanValue',
    value: false,
  };
}
BooleanValue → TRUE {
  $$ = {
    kind: 'BooleanValue',
    value: true,
  };
}

NullValue → NULL {
  $$ = {
    kind: 'NullValue',
  };
}

NumberValue → NUMBER {
  $$ = {
    kind: 'NumberValue',
    value: parseFloat($1.contents),
    base: 10,
  };
}

ExportDefaultDeclaration → EXPORT DEFAULT Declaration {
  $$ = {
    kind: 'ExportDefaultDeclaration',
    declaration: $3,
  };
}

Declaration → ClassDeclaration { $$ = $1; }
# TODO: Declaration → FunctionDeclaration

ClassDeclaration → CLASS Identifier OPENING_BRACE CLOSING_BRACE {
  $$ = {
    kind: 'ClassDeclaration',
    id: $2.name,
    body: [],
  };
}

ClassDeclaration → CLASS Identifier OPENING_BRACE ClassBodyList CLOSING_BRACE {
  $$ = {
    kind: 'ClassDeclaration',
    id: $2.name,
    body: $4,
  };
}

ClassBodyList → ClassBodyListItem { $$ = [$1]; }
ClassBodyList → ClassBodyList ClassBodyListItem { $1.push($2); $$ = $1; }

# TODO: ClassBodyListItem → DocComment { $$ = $1; }
ClassBodyListItem → MethodDefinition { $$ = $1; }
ClassBodyListItem → PropertyDeclaration { $$ = $1; }

# TODO: support computed property names as well
# TODO: support return type annotations
MethodDefinition →
  Identifier OPENING_PAREN ArgumentList CLOSING_PAREN OPENING_BRACE
    StatementList
  CLOSING_BRACE {
    $$ = {
      kind: 'MethodDefinition',
      key: $1,
      value: {
        kind: 'FunctionExpression',
        arguments: $3,
        body: $6,
      },
    };
  }

ArgumentList → Argument { $$ = [$1]; }
# TODO: supporting trailing comma at end of argument list
ArgumentList → ArgumentList COMMA Argument { $1.push($3); $$ = $1; }

Argument → Identifier {
  $$ = {
    kind: 'Argument',
    name: $1.name,
  };
}
# TODO: support richer types than Identifier-like
Argument → Identifier COLON Identifier {
  $$ = {
    kind: 'Argument',
    name: $1.name,
    type: $3.name,
  };
}

StatementList → Statement { $$ = [$1]; }
StatementList → StatementList Statement { $1.push($2); $$ = $1; }

# TODO: make this support richer `type` values than just Identifier-like ones.
PropertyDeclaration → Identifier COLON Identifier SEMICOLON {
  $$ = {
    kind: 'PropertyDeclaration',
    name: $1.name,
    type: $3.name,
  };
}
