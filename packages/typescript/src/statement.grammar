%token ASSIGN
%token BANG
%token CLASS
%token COLON
%token COMMA
%token CONST
%token CONTINUE
%token DEFAULT
%token ELSE
%token EQUALS
%token EXPORT
%token FALSE
%token FOR
%token FUNCTION
%token GREATER_THAN
%token GREATER_THAN_OR_EQUAL
%token IDENTIFIER
%token IF
%token IMPORT
%token LESS_THAN
%token LESS_THAN_OR_EQUAL
%token LET
%token LOGICAL_AND
%token LOGICAL_OR
%token NEW
%token NULL
%token NUMBER
%token OPENING_BRACE CLOSING_BRACE
%token OPENING_BRACKET CLOSING_BRACKET
%token OPENING_PAREN CLOSING_PAREN
%token REST
%token RETURN
%token SEMICOLON
%token STRICT_EQUALS
%token THIS
%token TRUE
%token WHILE
%token YIELD

Statement → AssignmentStatement { $$ = $1; }

AssignmentStatement → CONST Identifier ASSIGN Expression SEMICOLON {
  $$ = {
    kind: 'AssignmentStatement',
    binding: 'const',
    lhs: $2,
    rhs: $4,
  };
}
AssignmentStatement → LET Identifier ASSIGN Expression SEMICOLON {
  $$ = {
    kind: 'AssignmentStatement',
    binding: 'let',
    lhs: $2,
    rhs: $4,
  };
}

Identifier → IDENTIFIER {
  $$ = {
    kind: 'Identifier',
    name: $1.contents,
  };
}

Expression → Identifier { $$ = $1; }
Expression → PrimitiveValue { $$ = $1; }

PrimitiveValue → ArrayValue { $$ = $1; }
PrimitiveValue → BooleanValue { $$ = $1; }
PrimitiveValue → NullValue { $$ = $1; }
PrimitiveValue → NumberValue { $$ = $1; }

ArrayValue → OPENING_BRACKET CLOSING_BRACKET {
  $$ = {
    kind: 'ArrayValue',
    items: [],
  };
}
ArrayValue → OPENING_BRACKET ArrayItemList CLOSING_BRACKET {
  $$ = {
    kind: 'ArrayValue',
    items: $2,
  };
}
ArrayItemList → Expression { $$ = [$1]; }
ArrayItemList → ArrayItemList COMMA Expression { $1.push($3); $$ = $1; }

BooleanValue → FALSE {
  $$ = {
    kind: 'BooleanValue',
    value: false,
  };
}
BooleanValue → TRUE {
  $$ = {
    kind: 'BooleanValue',
    value: true,
  };
}

NullValue → NULL {
  $$ = {
    kind: 'NullValue',
  };
}

NumberValue → NUMBER {
  $$ = {
    kind: 'NumberValue',
    value: parseFloat($1.contents),
    base: 10,
  };
}
