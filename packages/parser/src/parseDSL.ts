import {StringScanner} from '@masochist/common';

import {RIGHTWARDS_ARROW} from './Constants';

import type {Grammar} from './types';

// TODO replace this with a parser generated by the generator
export default function parseDSL(dsl: string): Grammar {
  const scanner = new StringScanner(dsl);
  const ws = /\s+/;
  const symbol = /\w+/;
  const tokens = new Set<string>();
  const rules = [];
  while (!scanner.atEnd) {
    // Scan %tokens.
    if (scanner.scan(/%token\b/)) {
      const symbols = [];
      while (!scanner.atEnd) {
        scanner.scan(/[\t +]/);
        if (scanner.scan(symbol)) {
          symbols.push(scanner.last!);
        } else {
          break;
        }
      }
      if (symbols.length) {
        for (const symbol of symbols) {
          tokens.add(symbol);
        }
        continue;
      } else {
        throw new Error(
          `parseDSL(): expected at least one symbol after %token at ${scanner.fullContext}`,
        );
      }
    }

    // Scan rules.
    if (scanner.scan(/\w+/)) {
      const lhs = scanner.last!;
      scanner.scan(ws);
      scanner.expect(RIGHTWARDS_ARROW);
      scanner.scan(ws);
      const rhs = [scanner.expect(symbol)];
      let action = '';

      while (!scanner.atEnd) {
        scanner.scan(ws);
        if (scanner.scan('{')) {
          // Scan action.
          let depth = 1;
          action = '{';

          while (depth && !scanner.atEnd) {
            if (scanner.scan('{')) {
              action += '{';
              depth++;
            }
            if (scanner.scan(/[^\{\}]+/)) {
              action += scanner.last!;
            }
            if (scanner.scan('}')) {
              action += '}';
              depth--;
            }
          }
          if (depth) {
            throw new Error(
              `parseDSL(): Unbalanced braces in action at ${scanner.fullContext}`,
            );
          }
        } else if (scanner.peek(/\w+\s*\u2192/)) {
          break;
        } else if (scanner.scan(symbol)) {
          rhs.push(scanner.last!);
        } else if (scanner.scan(/\W+/)) {
          throw new Error(
            `parseDSL(): Unexpected input at ${scanner.fullContext}`,
          );
        }
      }

      if (action) {
        rules.push({lhs, rhs, action});
      } else {
        rules.push({lhs, rhs});
      }
      continue;
    }

    if (scanner.scan(ws)) {
      continue;
    }

    throw new Error(`parseDSL(): Unexpected input at ${scanner.fullContext}`);
  }
  return {tokens, rules};
}
