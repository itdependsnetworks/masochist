# Based on: https://spec.graphql.org/October2021/#sec-Document-Syntax

%token AMPERSAND
%token AT
%token BANG
%token BAR
%token COLON
%token DOLLAR
%token ELLIPSIS
%token EQUALS
%token NAME
%token NUMBER
%token OPENING_BRACE CLOSING_BRACE
%token OPENING_BRACKET CLOSING_BRACKET
%token OPENING_PAREN CLOSING_PAREN
%token STRING_VALUE BLOCK_STRING_VALUE

Document → DefinitionList {
  $$ = {
    kind: 'DOCUMENT',
    definitions: $1,
  };
}

DefinitionList → Definition { $$ = [$1]; }
DefinitionList → DefinitionList Definition { $1.push($2); $$ = $1; }

Definition → ExecutableDefinition { $$ = $1; }

ExecutableDefinition → OperationDefinition { $$ = $1; }

OperationDefinition → OperationType OperationNameOpt VariableDefinitionsOpt DirectivesOpt SelectionSet {
  $$ = {
    kind: 'OPERATION',
    name: $2,
    directives: $4,
    selections: $5,
    type: $1,
    variables: $3,
  };
}
OperationDefinition → SelectionSet {
  $$ = {
    kind: 'OPERATION',
    name: null,
    directives: null,
    selections: $1,
    type: 'QUERY',
    variables: null,
  };
}

OperationType → NAME {{
  const {contents} = $1;
  if (contents === 'query') {
    $$ = 'QUERY';
  } else if (contents === 'mutation') {
    $$ = 'MUTATION';
  } else if (contents === 'subscription') {
    $$ = 'SUBSCRIPTION';
  } else {
    throw new Error(`Unsupported operation type: ${contents}`);
  }
}}

OperationNameOpt → NAME { $$ = $1.contents; }
OperationNameOpt → ε { $$ = null; }

VariableDefinitionsOpt → OPENING_PAREN VariableDefinitionList CLOSING_PAREN {
  $$ = $2;
}
VariableDefinitionsOpt → ε { $$ = null; }

VariableDefinitionList → VariableDefinition { $$ = [$1]; }
VariableDefinitionList → VariableDefinitionList VariableDefinition {
  $1.push($2); $$ = $1;
}

# TODO: add DirectivesConstOpt
VariableDefinition → Variable COLON Type DefaultValueOpt {
  $$ = {
    kind: 'VARIABLE_DEFINITION',
    defaultValue: $4,
    directives: null,
    type: $3,
    variable: $1,
  };
}

Variable → DOLLAR NAME {
  $$ = {
    kind: 'VARIABLE',
    name: $2.contents,
  };
}

Type → NamedType { $$ = $1; }
Type → ListType { $$ = $1; }
Type → NonNullType { $$ = $1; }

NamedType → NAME {
  $$ = {
    kind: 'NAMED_TYPE',
    name: $1.contents,
  };
}

ListType → OPENING_BRACKET Type CLOSING_BRACKET {
  $$ = {
    kind: 'LIST_TYPE',
    type: $2,
  };
}

NonNullType → ListType BANG {
  $$ = {
    kind: 'NON_NULL_TYPE',
    type: $1,
  };
}
NonNullType → NamedType BANG {
  $$ = {
    kind: 'NON_NULL_TYPE',
    type: $1,
  };
}

DefaultValueOpt → EQUALS ValueConst { $$ = $2; }
DefaultValueOpt → ε { $$ = null; }

ValueConst → NumberValue { $$ = $1; }
ValueConst → StringValue { $$ = $1; }
ValueConst → NamedValue { $$ = $1; }
ValueConst → ListValueConst { $$ = $1; }
ValueConst → ObjectValueConst { $$ = $1; }

# IntValue, FloatValue
NumberValue → NUMBER {{
  const {contents} = $1;

  // TODO: Distinguish between these tokens in the lexer instead?
  if (/^-?\d+$/.test(contents)) {
    $$ = {kind: 'INT', value: parseInt(contents, 10)};
  } else {
    $$ = {kind: 'FLOAT', value: contents};
  }
}}

# BooleanValue, NullValue, EnumValue
NamedValue → NAME {{
  const {contents} = $1;
  if (contents === 'true') {
    $$ = {kind: 'BOOLEAN', value: true};
  } else if (contents === 'false') {
    $$ = {kind: 'BOOLEAN', value: false};
  } else if (contents === 'null') {
    $$ = {kind: 'NULL'};
  } else {
    $$ = {kind: 'ENUM', value: contents};
  }
}}

ListValueConst → OPENING_BRACKET CLOSING_BRACKET {
  $$ = {
    kind: 'LIST_VALUE',
    value: [],
  };
}
ListValueConst → OPENING_BRACKET ListValueConstList CLOSING_BRACKET {
  $$ = {
    kind: 'LIST_VALUE',
    value: $2,
  };
}

ListValueConstList → ValueConst { $$ = [$1]; }
ListValueConstList → ListValueConstList ValueConst { $1.push($2); $$ = $1; }

ObjectValueConst → OPENING_BRACE CLOSING_BRACE {
  $$  = {
    kind: 'OBJECT_VALUE',
    fields: [],
  };
}
ObjectValueConst → OPENING_BRACE ObjectFieldConstList CLOSING_BRACE {
  $$ = {
    kind: 'OBJECT_VALUE',
    fields: $2,
  };
}

ObjectFieldConstList → ObjectFieldConst { $$ = [$1]; }
ObjectFieldConstList → ObjectFieldConstList ObjectFieldConst { $1.push($2); $$ = $1; }

ObjectFieldConst → NAME COLON ValueConst {
  $$ = {
    name: $1.contents,
    value: $3,
  };
}

DirectivesOpt → DirectiveList { $$ = $1; }
DirectivesOpt → ε { $$ = null; }

DirectiveList → Directive { $$ = [$1]; }
DirectiveList → DirectiveList Directive { $1.push($2); $$ = $1; }

Directive → AT NAME ArgumentsOpt {
  $$ = {
    kind: 'DIRECTIVE',
    arguments: $3,
    name: $2.contents,
  };
}

SelectionSet → OPENING_BRACE SelectionList CLOSING_BRACE { $$ = $2; }

SelectionSetOpt → SelectionSet { $$ = $1; }
SelectionSetOpt → ε { $$ = null; }

SelectionList → Selection { $$ = [$1]; }
SelectionList → SelectionList Selection { $1.push($2); $$ = $1; }

Selection → Field { $$ = $1; }

Field → NAME ArgumentsOpt DirectivesOpt SelectionSetOpt {
  $$ = {
    kind: 'FIELD',
    alias: null,
    arguments: $2,
    directives: $3,
    name: $1.contents,
    selections: $4,
  };
}
Field → Alias NAME ArgumentsOpt DirectivesOpt SelectionSetOpt {
  $$ = {
    kind: 'FIELD',
    alias: $1,
    arguments: $3,
    directives: $4,
    name: $2.contents,
    selections: $5,
  };
}

Alias → NAME COLON { $$ = $1.contents; }

ArgumentsOpt → OPENING_PAREN ArgumentList CLOSING_PAREN { $$ = $2; }
ArgumentsOpt → ε { $$ = null; }

ArgumentList → Argument { $$ = [$1]; }
ArgumentList → ArgumentList Argument { $1.push($2); $$ = $1; }

Argument → NAME COLON Value {
  $$ = {
    kind: 'ARGUMENT',
    name: $1.contents,
    value: $3,
  };
}

Value → Variable { $$ = $1; }
Value → NumberValue { $$ = $1; }
Value → StringValue { $$ = $1; }
Value → NamedValue { $$ = $1; }
Value → ListValue { $$ = $1; }
Value → ObjectValue { $$ = $1; }

StringValue → STRING_VALUE {
  $$ = {
    kind: 'STRING',
    block: false,
    // TODO: consider doing this slice in the lexer
    value: $1.contents.slice(1, -1),
  };
}
StringValue → BLOCK_STRING_VALUE {
  $$ = {
    kind: 'STRING',
    block: true,
    // TODO: preprocess value here...
    value: $1.contents,
  };
}

ListValue → OPENING_BRACKET CLOSING_BRACKET {
  $$ = {
    kind: 'LIST_VALUE',
    value: [],
  };
}
ListValue → OPENING_BRACKET ListValueList CLOSING_BRACKET {
  $$ = {
    kind: 'LIST_VALUE',
    value: $2,
  };
}

ListValueList → Value { $$ = [$1]; }
ListValueList → ListValueList Value { $1.push($2); $$ = $1; }

ObjectValue → OPENING_BRACE CLOSING_BRACE {
  $$  = {
    kind: 'OBJECT_VALUE',
    fields: [],
  };
}
ObjectValue → OPENING_BRACE ObjectFieldList CLOSING_BRACE {
  $$ = {
    kind: 'OBJECT_VALUE',
    fields: $2,
  };
}

ObjectFieldList → ObjectField { $$ = [$1]; }
ObjectFieldList → ObjectFieldList ObjectField { $1.push($2); $$ = $1; }

ObjectField → NAME COLON Value {
  $$ = {
    name: $1.contents,
    value: $3,
  };
}
