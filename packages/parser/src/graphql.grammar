# Based on: https://spec.graphql.org/October2021/#sec-Document-Syntax

%token AMPERSAND
%token AT
%token BANG
%token BAR
%token COLON
%token DOLLAR
%token ELLIPSIS
%token EQUALS
%token NAME
%token NUMBER
%token OPENING_BRACE CLOSING_BRACE
%token OPENING_BRACKET CLOSING_BRACKET
%token OPENING_PAREN CLOSING_PAREN
%token STRING_VALUE BLOCK_STRING_VALUE

Document → DefinitionList {
  $$ = {
    kind: 'DOCUMENT',
    definitions: $1,
  };
}

DefinitionList → Definition { $$ = [$1]; }
DefinitionList → DefinitionList Definition { $1.push($2); $$ = $1; }

Definition → ExecutableDefinition { $$ = $1; }

ExecutableDefinition → OperationDefinition { $$ = $1; }

OperationDefinition → OperationType OperationNameOpt VariableDefinitionsOpt DirectivesOpt SelectionSet {
  $$ = {
    kind: 'OPERATION',
    name: $2,
    directives: $4,
    selections: $5,
    type: $1,
    variables: $3,
  };
}
OperationDefinition → SelectionSet {
  $$ = {
    kind: 'OPERATION',
    name: null,
    directives: null,
    selections: $1,
    type: 'QUERY',
    variables: null,
  };
}

OperationType → NAME {{
  const {contents} = $1;
  if (contents === 'query') {
    $$ = 'QUERY';
  } else if (contents === 'mutation') {
    $$ = 'MUTATION';
  } else if (contents === 'subscription') {
    $$ = 'SUBSCRIPTION';
  } else {
    throw new Error(`Unsupported operation type: ${contents}`);
  }
}}

OperationNameOpt → NAME { $$ = $1.contents; }
OperationNameOpt → ε { $$ = null; }

VariableDefinitionsOpt → OPENING_PAREN VariableDefinitionList CLOSING_PAREN {
  $$ = $2;
}
VariableDefinitionsOpt → ε { $$ = null; }

VariableDefinitionList → VariableDefinition { $$ = [$1]; }
VariableDefinitionList → VariableDefinitionList VariableDefinition {
  $1.push($2); $$ = $1;
}

# TODO: add DefaultValueOpt and DirectivesOpt
VariableDefinition → Variable COLON Type {
  $$ = {
    kind: 'VARIABLE_DEFINITION',
    defaultValue: null,
    directives: null,
    type: $3,
    variable: $1,
  };
}

Variable → DOLLAR NAME {
  $$ = {
    kind: 'VARIABLE',
    name: $2.contents,
  };
}

Type → NamedType { $$ = $1; }
Type → ListType { $$ = $1; }
Type → NonNullType { $$ = $1; }

NamedType → NAME {
  $$ = {
    kind: 'NAMED_TYPE',
    name: $1.contents,
  };
}

ListType → OPENING_BRACKET Type CLOSING_BRACKET {
  $$ = {
    kind: 'LIST_TYPE',
    type: $2,
  };
}

NonNullType → ListType BANG {
  $$ = {
    kind: 'NON_NULL_TYPE',
    type: $1,
  };
}
NonNullType → NamedType BANG {
  $$ = {
    kind: 'NON_NULL_TYPE',
    type: $1,
  };
}

DirectivesOpt → DirectiveList { $$ = $1; }
DirectivesOpt → ε { $$ = null; }

DirectiveList → Directive { $$ = [$1]; }
DirectiveList → DirectiveList Directive { $1.push($2); $$ = $1; }

# TODO: add arguments
Directive → AT NAME {
  $$ = {
    kind: 'DIRECTIVE',
    name: $2.contents,
  };
}

SelectionSet → OPENING_BRACE SelectionList CLOSING_BRACE { $$ = $2; }

SelectionSetOpt → SelectionSet { $$ = $1; }
SelectionSetOpt → ε { $$ = null; }

SelectionList → Selection { $$ = [$1]; }
SelectionList → SelectionList Selection { $1.push($2); $$ = $1; }

Selection → Field { $$ = $1; }

# TODO: add DirectivesOpt to these
Field → NAME SelectionSetOpt {
  $$ = {
    kind: 'FIELD',
    alias: null,
    directives: null,
    name: $1.contents,
    selections: $2,
  };
}
Field → Alias NAME SelectionSetOpt {
  $$ = {
    kind: 'FIELD',
    alias: $1,
    directives: null,
    name: $2.contents,
    selections: $3,
  };
}

Alias → NAME COLON { $$ = $1.contents; }
