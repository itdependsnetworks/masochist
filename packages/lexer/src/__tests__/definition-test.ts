import definition from '../definition';

describe('definition', () => {
  it('is a transition table containing the state machine for the lexer', () => {
    expect(definition).toEqual({
      acceptStates: new Set([
        1, 2, 3, 4, 32, 26, 46, 6, 7, 8, 9, 10, 13, 37, 39, 14, 36, 15, 16, 17,
        18, 19, 20, 21, 31, 22, 23, 24,
      ]),
      startStates: new Set([0]),
      transitions: [
        /* 0 */ new Map([
          ['Atom:\t', new Set([1])],
          ['Atom:\n', new Set([2])],
          ['Atom:\r', new Set([3])],
          ['Atom: ', new Set([1])],
          ['Atom:!', new Set([4])],
          ['Atom:"', new Set([5])],
          ['Atom:#', new Set([6])],
          ['Atom:$', new Set([7])],
          ['Atom:&', new Set([8])],
          ['Atom:(', new Set([9])],
          ['Atom:)', new Set([10])],
          ['Atom:,', new Set([2])],
          ['Atom:-', new Set([11])],
          ['Atom:.', new Set([12])],
          ['Atom:0', new Set([13])],
          ['Range:1-9', new Set([14])],
          ['Atom::', new Set([15])],
          ['Atom:=', new Set([16])],
          ['Atom:@', new Set([17])],
          ['Range:A-Z', new Set([18])],
          ['Atom:[', new Set([19])],
          ['Atom:]', new Set([20])],
          ['Atom:_', new Set([18])],
          ['Range:a-n', new Set([18])],
          ['Atom:o', new Set([21])],
          ['Range:p-z', new Set([18])],
          ['Atom:{', new Set([22])],
          ['Atom:|', new Set([23])],
          ['Atom:}', new Set([24])],
          ['Atom:\ufeff', new Set([2])],
        ]),
        /* 1 */ new Map([
          ['Atom:\t', new Set([1])],
          ['Atom: ', new Set([1])],
        ]),
        /* 2 */ new Map(),
        /* 3 */ new Map([['Atom:\n', new Set([2])]]),
        /* 4 */ new Map(),
        /* 5 */ new Map([
          ['Atom:\t', new Set([25])],
          ['Range: -!', new Set([25])],
          ['Atom:"', new Set([26])],
          ['Range:#-[', new Set([25])],
          ['Atom:\\', new Set([27])],
          ['Range:]-\uffff', new Set([25])],
        ]),
        /* 6 */ new Map([
          ['Atom:\t', new Set([6])],
          ['Range: -\uffff', new Set([6])],
        ]),
        /* 7 */ new Map(),
        /* 8 */ new Map(),
        /* 9 */ new Map(),
        /* 10 */ new Map(),
        /* 11 */ new Map([
          ['Atom:0', new Set([13])],
          ['Range:1-9', new Set([14])],
        ]),
        /* 12 */ new Map([['Atom:.', new Set([28])]]),
        /* 13 */ new Map([
          ['Atom:.', new Set([29])],
          ['Atom:E', new Set([30])],
          ['Atom:e', new Set([30])],
        ]),
        /* 14 */ new Map([
          ['Atom:.', new Set([29])],
          ['Range:0-9', new Set([14])],
          ['Atom:E', new Set([30])],
          ['Atom:e', new Set([30])],
        ]),
        /* 15 */ new Map(),
        /* 16 */ new Map(),
        /* 17 */ new Map(),
        /* 18 */ new Map([
          ['Range:0-9', new Set([18])],
          ['Range:A-Z', new Set([18])],
          ['Atom:_', new Set([18])],
          ['Range:a-z', new Set([18])],
        ]),
        /* 19 */ new Map(),
        /* 20 */ new Map(),
        /* 21 */ new Map([
          ['Range:0-9', new Set([18])],
          ['Range:A-Z', new Set([18])],
          ['Atom:_', new Set([18])],
          ['Range:a-m', new Set([18])],
          ['Atom:n', new Set([31])],
          ['Range:o-z', new Set([18])],
        ]),
        /* 22 */ new Map(),
        /* 23 */ new Map(),
        /* 24 */ new Map(),
        /* 25 */ new Map([
          ['Atom:\t', new Set([25])],
          ['Range: -!', new Set([25])],
          ['Atom:"', new Set([32])],
          ['Range:#-[', new Set([25])],
          ['Atom:\\', new Set([27])],
          ['Range:]-\uffff', new Set([25])],
        ]),
        /* 26 */ new Map([['Atom:"', new Set([33])]]),
        /* 27 */ new Map([
          ['Atom:"', new Set([25])],
          ['Atom:/', new Set([25])],
          ['Atom:\\', new Set([34])],
          ['Atom:b', new Set([25])],
          ['Atom:f', new Set([25])],
          ['Atom:n', new Set([25])],
          ['Atom:r', new Set([25])],
          ['Atom:t', new Set([25])],
          ['Atom:u', new Set([35])],
        ]),
        /* 28 */ new Map([['Atom:.', new Set([36])]]),
        /* 29 */ new Map([['Range:0-9', new Set([37])]]),
        /* 30 */ new Map([
          ['Atom:+', new Set([38])],
          ['Atom:-', new Set([38])],
          ['Range:0-9', new Set([39])],
        ]),
        /* 31 */ new Map([
          ['Range:0-9', new Set([18])],
          ['Range:A-Z', new Set([18])],
          ['Atom:_', new Set([18])],
          ['Range:a-z', new Set([18])],
        ]),
        /* 32 */ new Map(),
        /* 33 */ new Map([
          ['Range:\t-\n', new Set([33])],
          ['Atom:\r', new Set([33])],
          ['Range: -!', new Set([33])],
          ['Atom:"', new Set([40])],
          ['Range:#-[', new Set([33])],
          ['Atom:\\', new Set([41])],
          ['Range:]-\uffff', new Set([33])],
        ]),
        /* 34 */ new Map([
          ['Atom:/', new Set([25])],
          ['Atom:\\', new Set([34])],
          ['Atom:b', new Set([25])],
          ['Atom:f', new Set([25])],
          ['Atom:n', new Set([25])],
          ['Atom:r', new Set([25])],
          ['Atom:t', new Set([25])],
          ['Atom:u', new Set([35])],
        ]),
        /* 35 */ new Map([
          ['Range:0-9', new Set([42])],
          ['Range:A-F', new Set([42])],
          ['Range:a-f', new Set([42])],
        ]),
        /* 36 */ new Map(),
        /* 37 */ new Map([
          ['Range:0-9', new Set([37])],
          ['Atom:E', new Set([30])],
          ['Atom:e', new Set([30])],
        ]),
        /* 38 */ new Map([['Range:0-9', new Set([39])]]),
        /* 39 */ new Map([['Range:0-9', new Set([39])]]),
        /* 40 */ new Map([
          ['Range:\t-\n', new Set([33])],
          ['Atom:\r', new Set([33])],
          ['Range: -!', new Set([33])],
          ['Atom:"', new Set([43])],
          ['Range:#-[', new Set([33])],
          ['Atom:\\', new Set([41])],
          ['Range:]-\uffff', new Set([33])],
        ]),
        /* 41 */ new Map([
          ['Range:\t-\n', new Set([33])],
          ['Atom:\r', new Set([33])],
          ['Range: -!', new Set([33])],
          ['Atom:"', new Set([44])],
          ['Range:#-[', new Set([33])],
          ['Atom:\\', new Set([41])],
          ['Range:]-\uffff', new Set([33])],
        ]),
        /* 42 */ new Map([
          ['Range:0-9', new Set([45])],
          ['Range:A-F', new Set([45])],
          ['Range:a-f', new Set([45])],
        ]),
        /* 43 */ new Map([
          ['Range:\t-\n', new Set([33])],
          ['Atom:\r', new Set([33])],
          ['Range: -!', new Set([33])],
          ['Atom:"', new Set([46])],
          ['Range:#-[', new Set([33])],
          ['Atom:\\', new Set([41])],
          ['Range:]-\uffff', new Set([33])],
        ]),
        /* 44 */ new Map([
          ['Range:\t-\n', new Set([33])],
          ['Atom:\r', new Set([33])],
          ['Range: -!', new Set([33])],
          ['Atom:"', new Set([47])],
          ['Range:#-[', new Set([33])],
          ['Atom:\\', new Set([41])],
          ['Range:]-\uffff', new Set([33])],
        ]),
        /* 45 */ new Map([
          ['Range:0-9', new Set([48])],
          ['Range:A-F', new Set([48])],
          ['Range:a-f', new Set([48])],
        ]),
        /* 46 */ new Map(),
        /* 47 */ new Map([
          ['Atom:\n', new Set([33])],
          ['Atom:\r', new Set([33])],
          ['Range: -[', new Set([33])],
          ['Atom:\\', new Set([41])],
          ['Range:]-\uffff', new Set([33])],
        ]),
        /* 48 */ new Map([
          ['Range:0-9', new Set([25])],
          ['Range:A-F', new Set([25])],
          ['Range:a-f', new Set([25])],
        ]),
      ],
      labels: [
        /* 0 */ undefined,
        /* 1 */ new Set(['IGNORED']),
        /* 2 */ new Set(['IGNORED']),
        /* 3 */ new Set(['IGNORED']),
        /* 4 */ new Set(['BANG']),
        /* 5 */ undefined,
        /* 6 */ new Set(['IGNORED']),
        /* 7 */ new Set(['DOLLAR']),
        /* 8 */ new Set(['AMPERSAND']),
        /* 9 */ new Set(['OPENING_PAREN']),
        /* 10 */ new Set(['CLOSING_PAREN']),
        /* 11 */ undefined,
        /* 12 */ undefined,
        /* 13 */ new Set(['NUMBER']),
        /* 14 */ new Set(['NUMBER']),
        /* 15 */ new Set(['COLON']),
        /* 16 */ new Set(['EQUALS']),
        /* 17 */ new Set(['AT']),
        /* 18 */ new Set(['NAME']),
        /* 19 */ new Set(['OPENING_BRACKET']),
        /* 20 */ new Set(['CLOSING_BRACKET']),
        /* 21 */ new Set(['NAME']),
        /* 22 */ new Set(['OPENING_BRACE']),
        /* 23 */ new Set(['BAR']),
        /* 24 */ new Set(['CLOSING_BRACE']),
        /* 25 */ undefined,
        /* 26 */ new Set(['STRING_VALUE']),
        /* 27 */ undefined,
        /* 28 */ undefined,
        /* 29 */ undefined,
        /* 30 */ undefined,
        /* 31 */ new Set(['ON', 'NAME']),
        /* 32 */ new Set(['STRING_VALUE']),
        /* 33 */ undefined,
        /* 34 */ undefined,
        /* 35 */ undefined,
        /* 36 */ new Set(['ELLIPSIS']),
        /* 37 */ new Set(['NUMBER']),
        /* 38 */ undefined,
        /* 39 */ new Set(['NUMBER']),
        /* 40 */ undefined,
        /* 41 */ undefined,
        /* 42 */ undefined,
        /* 43 */ undefined,
        /* 44 */ undefined,
        /* 45 */ undefined,
        /* 46 */ new Set(['BLOCK_STRING_VALUE']),
        // Note we leave the last two `undefined` entries off (corresponding to
        // states 45 and 46) because they confuse Jest.
      ],
    });
  });
});
