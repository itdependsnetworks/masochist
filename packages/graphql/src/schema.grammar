# Based on: https://spec.graphql.org/October2021/#sec-Document-Syntax

%token AMPERSAND
%token AT
%token BANG
%token BAR
%token COLON
%token DOLLAR
%token ELLIPSIS
%token ENUM
%token EQUALS
%token FRAGMENT
%token IMPLEMENTS
%token INTERFACE
%token MUTATION
%token NAME
%token NUMBER
%token ON
%token OPENING_BRACE CLOSING_BRACE
%token OPENING_BRACKET CLOSING_BRACKET
%token OPENING_PAREN CLOSING_PAREN
%token QUERY
%token SCALAR
%token SCHEMA
%token STRING_VALUE BLOCK_STRING_VALUE
%token SUBSCRIPTION
%token TYPE
%token UNION

TypeSystemDocument → TypeSystemDefinitionList {
  $$ = {
    kind: 'TYPE_SYSTEM_DOCUMENT',
    definitions: $1,
  };
}

TypeSystemDefinitionList → TypeSystemDefinition { $$ = [$1]; }
TypeSystemDefinitionList → TypeSystemDocument TypeSystemDefinition { $1.push($2); $$ = $1; }

# TODO: finish
# TypeSystemDefinition → DirectiveDefinition { $$ = $1; }
TypeSystemDefinition → SchemaDefinition { $$ = $1; }
TypeSystemDefinition → TypeDefinition { $$ = $1; }

SchemaDefinition → Description SCHEMA OPENING_BRACE OperationTypeList CLOSING_BRACE {
  const query = $4.find(({kind}) => kind === 'QUERY')?.name;
  const mutation = $4.find(({kind}) => kind === 'MUTATION')?.name;
  const subscription = $4.find(({kind}) => kind === 'SUBSCRIPTION')?.name;
  if (!query) {
    throw new Error('SCHEMA type requires a "query" operation type');
  }
  if (new Set($4.map(({kind}) => kind)).size !== $4.length) {
    throw new Error('operation types may only appear once each in SCHEMA type');
  }
  $$ = {
    kind: 'SCHEMA',
    description: $1.value.trim(),
    query,
    mutation,
    subscription,
  };
}
SchemaDefinition → SCHEMA OPENING_BRACE OperationTypeList CLOSING_BRACE {
  const query = $3.find(({kind}) => kind === 'QUERY')?.name;
  const mutation = $3.find(({kind}) => kind === 'MUTATION')?.name;
  const subscription = $3.find(({kind}) => kind === 'SUBSCRIPTION')?.name;
  if (!query) {
    throw new Error('SCHEMA type requires a "query" operation type');
  }
  if (new Set($3.map(({kind}) => kind)).size !== $3.length) {
    throw new Error('operation types may only appear once each in SCHEMA type');
  }
  $$ = {
    kind: 'SCHEMA',
    query,
    mutation,
    subscription,
  };
}

OperationTypeList → OperationTypeListItem { $$ = [$1]; }
OperationTypeList → OperationTypeList OperationTypeListItem { $1.push($2); $$ = $1; }
OperationTypeListItem → QUERY COLON NAME {
  $$ = {
    kind: 'QUERY',
    name: $3.contents,
  };
}
OperationTypeListItem → MUTATION COLON NAME {
  $$ = {
    kind: 'MUTATION',
    name: $3.contents,
  };
}
OperationTypeListItem → SUBSCRIPTION COLON NAME {
  $$ = {
    kind: 'SUBSCRIPTION',
    name: $3.contents,
  };
}

# TODO: other types
TypeDefinition → EnumTypeDefinition { $$ = $1; }
#TypeDefinition → InputObjectTypeDefinition { $$ = $1; }
#TypeDefinition → InterfaceTypeDefinition { $$ = $1; }
TypeDefinition → ObjectTypeDefinition { $$ = $1; }
TypeDefinition → ScalarTypeDefinition { $$ = $1; }
TypeDefinition → UnionTypeDefinition { $$ = $1; }

EnumTypeDefinition → Description ENUM NAME OPENING_BRACE EnumValuesList CLOSING_BRACE {
  if ($5.some(({name}) => {
    return (
      name === 'true' ||
      name === 'false' ||
      name === 'null'
    );
  })) {
    throw new Error('enum values may not include "true", "false" or "null"');
  }
  $$ = {
    kind: 'ENUM_TYPE',
    name: $3.contents,
    description: $1.value.trim(),
    values: $5,
  };
}
EnumTypeDefinition → ENUM NAME OPENING_BRACE EnumValuesList CLOSING_BRACE {
  if ($4.some(({name}) => {
    return (
      name === 'true' ||
      name === 'false' ||
      name === 'null'
    );
  })) {
    throw new Error('enum values may not include "true", "false" or "null"');
  }
  $$ = {
    kind: 'ENUM_TYPE',
    name: $2.contents,
    values: $4,
  };
}

EnumValuesList → EnumValuesListItem { $$ = [$1]; }
EnumValuesList → EnumValuesList EnumValuesListItem { $1.push($2); $$ = $1; }

EnumValuesListItem → Description NAME {
  $$ = {
    kind: 'ENUM_VALUE',
    name: $2.contents,
    description: $1.value.trim(),
  };
}
EnumValuesListItem → NAME {
  $$ = {
    kind: 'ENUM_VALUE',
    name: $1.contents,
  };
}

ObjectTypeDefinition → Description TYPE NAME Implements OPENING_BRACE FieldDefinitionList CLOSING_BRACE {
  $$ = {
    kind: 'OBJECT_TYPE',
    name: $3.contents,
    description: $1.value.trim(),
    implements: $4,
    fields: $6,
  };
}
ObjectTypeDefinition → Description TYPE NAME OPENING_BRACE FieldDefinitionList CLOSING_BRACE {
  $$ = {
    kind: 'OBJECT_TYPE',
    name: $3.contents,
    description: $1.value.trim(),
    implements: [],
    fields: $5,
  };
}
ObjectTypeDefinition → TYPE NAME Implements OPENING_BRACE FieldDefinitionList CLOSING_BRACE {
  $$ = {
    kind: 'OBJECT_TYPE',
    name: $2.contents,
    implements: $3,
    fields: $5,
  };
}
ObjectTypeDefinition → TYPE NAME OPENING_BRACE FieldDefinitionList CLOSING_BRACE {
  $$ = {
    kind: 'OBJECT_TYPE',
    name: $2.contents,
    implements: [],
    fields: $4,
  };
}

Implements → IMPLEMENTS AMPERSAND ImplementsList { $$ =$3; }
Implements → IMPLEMENTS ImplementsList { $$ =$2; }
ImplementsList → NAME { $$ = [$1.contents]; }
ImplementsList → ImplementsList AMPERSAND NAME { $1.push($3.contents); $$ = $1; }

FieldDefinitionList → FieldDefinition { $$ = [$1]; }
FieldDefinitionList → FieldDefinitionList FieldDefinition { $1.push($2); $$ = $1; }

FieldDefinition → Description NAME Arguments COLON Type {
  $$ = {
    kind: 'FIELD',
    name: $2.contents,
    description: $1.value.trim(),
    arguments: $3,
    type: $5,
  };
}
FieldDefinition → NAME Arguments COLON Type {
  $$ = {
    kind: 'FIELD',
    name: $2.contents,
    arguments: $2,
    type: $4,
  };
}
FieldDefinition → Description NAME COLON Type {
  $$ = {
    kind: 'FIELD',
    name: $2.contents,
    description: $1.value.trim(),
    arguments: [],
    type: $4,
  };
}
FieldDefinition → NAME COLON Type {
  $$ = {
    kind: 'FIELD',
    name: $1.contents,
    arguments: [],
    type: $3,
  };
}

Arguments → OPENING_PAREN InputValueDefinitionList CLOSING_PAREN { $$ = $2; }

InputValueDefinitionList → InputValueDefinition { $$ = [$1]; }
InputValueDefinitionList → InputValueDefinitionList InputValueDefinition { $1.push($2); $$ = $1; }

# TODO: support default values
InputValueDefinition → Description NAME COLON Type {
  $$ = {
    kind: 'INPUT_VALUE',
    name: $2.contents,
    // TODO: going to have to dedent these because, unlike the other
    // descriptions, these appear indented.
    description: $1.value.trim(),
    type: $4,
  };
}
InputValueDefinition → NAME COLON Type {
  $$ = {
    kind: 'INPUT_VALUE',
    name: $1.contents,
    type: $3,
  };
}

# TODO: Add optional directives
ScalarTypeDefinition → Description SCALAR NAME {
  $$ = {
    kind: 'SCALAR',
    name: $3.contents,
    description: $1.value.trim(),
  };
}
ScalarTypeDefinition → SCALAR NAME {
  $$ = {
    kind: 'SCALAR',
    name: $2.contents,
  };
}

# TODO: Add optional directives
UnionTypeDefinition → Description UNION NAME EQUALS UnionTypeList {
  $$ = {
    kind: 'UNION',
    name: $3.contents,
    members: $5,
    description: $1.value.trim(),
  };
}
UnionTypeDefinition → Description UNION NAME EQUALS BAR UnionTypeList {
  $$ = {
    kind: 'UNION',
    name: $3.contents,
    members: $6,
    description: $1.value.trim(),
  };
}
UnionTypeDefinition → UNION NAME EQUALS UnionTypeList {
  $$ = {
    kind: 'UNION',
    name: $2.contents,
    members: $4,
  };
}
UnionTypeDefinition → UNION NAME EQUALS BAR UnionTypeList {
  $$ = {
    kind: 'UNION',
    name: $2.contents,
    members: $5,
  };
}
UnionTypeList → UnionTypeListItem { $$ = [$1]; }
UnionTypeList → UnionTypeList BAR UnionTypeListItem { $1.push($3); $$ = $1; }
UnionTypeListItem → NAME {
  $$ = $1.contents;
}

Description → StringValue { $$ = $1; }

StringValue → STRING_VALUE {
  $$ = {
    kind: 'STRING',
    block: false,
    value: $1.contents.slice(1, -1),
  };
}
StringValue → BLOCK_STRING_VALUE {
  $$ = {
    kind: 'STRING',
    block: true,
    value: $1.contents.slice(3, -3),
  };
}

Type → NamedType { $$ = $1; }
Type → NonNullType { $$ = $1; }
Type → ListType { $$ = $1; }

NamedType → NAME {
  $$ = {
    kind: 'NAMED_TYPE',
    name: $1.contents,
  };
}
# TODO: add back in reserved words here (enum etc)

NonNullType → NamedType BANG {
  $$ = {
    kind: 'NON_NULL_TYPE',
    type: $1,
  };
}
NonNullType → ListType BANG {
  $$ = {
    kind: 'NON_NULL_TYPE',
    type: $1,
  };
}

ListType → OPENING_BRACKET Type CLOSING_BRACKET {
  $$ = {
    kind: 'LIST_TYPE',
    type: $2,
  };
}
